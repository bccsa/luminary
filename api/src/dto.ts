/* -------------------------------------------------------
 * This file contains the central types and data transfer
 * objects (DTOs) used by both the API, CMS and app.
 * ------------------------------------------------------- */

/**
 * Database unique document ID
 */
export type Uuid = string;

/**
 * Document types
 */
export enum DocType {
    Post = "post",
    Content = "content",
    Tag = "tag",
    Image = "image",
    Video = "video",
    Audio = "Audio",
    MediaDownload = "mediaDownload",
    User = "user",
    Language = "language",
    Group = "group",
    Change = "change",
    Ack = "ack",
    ChangeReq = "changeReq",
}

/**
 * Acl permissions
 */
export enum AclPermission {
    View = "view",
    Assign = "assign",
    Edit = "edit",
    Translate = "translate",
    Publish = "publish",
    Delete = "delete",
}

/**
 * Database structured ACL entry (used in GroupDto)
 */
export type GroupAclEntryDto = {
    type: DocType;
    groupId: Uuid;
    permission: Array<AclPermission>;
};

/**
 * Database structured Group object
 */
export type GroupDto = {
    _id: Uuid;
    _rev?: string;
    type: DocType.Group;
    updatedTimeUtc?: number;
    name: string;
    acl: Array<GroupAclEntryDto>;
};

/**
 * Database structured document change object. These documents are generated by the API from client
 * submitted ChangeReqDto documents and distributed to clients.
 */
export type ChangeDto = {
    _id: Uuid;
    type: DocType.Change;
    updatedTimeUtc: number;
    docId: Uuid;
    docType: DocType;
    memberOf?: Array<Uuid>; // Used for all docTypes except for groups
    acl?: Array<GroupAclEntryDto>; // Used for Group docType
    changes: any; // Object containing changed document fields
};

/**
 * Document structure for client / CMS submitted changes to existing documents or new documents.
 * After successful processing, a differential "change" document (ChangeDto) is generated by the
 * API from the UpdateDto and distributed to clients.
 */
export type ChangeReqDto = {
    docId: Uuid; // Uuid of submitted document in "doc" property
    type: DocType.ChangeReq;
    doc: any; // Object containing full submitted / updated document
};

/**
 * API acknowledgement to client after client submission of an UpdateDto document.
 */
export type AckDto = {
    docId: Uuid; // Uuid of submitted ChangeReqDto to be acknowledged
    type: DocType.Ack;
    ack: Ack;
    message: string; // Reject reason if applicable
};

/**
 * Acknowledge status used in AckDto
 */
export enum Ack {
    Accepted = "accepted",
    Rejected = "rejected",
}

// TODO: Add DTO's for all document types for type checking of submitted documents
